Given an array of integers nums and an integer target, return the indices i and j such that nums[i] + nums[j] == target and i != j.

You may assume that every input has exactly one pair of indices i and j that satisfy the condition.

Return the answer with the smaller index first. 

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int , int> diffmap;
        for(int i = 0; i<nums.size();i++){
            int diff = target - nums[i]; //calculating the difference between nums[i] and the target and 
                                         //and saving as diff
            if(diffmap.count(diff))
            {
                return {diffmap[diff] , i}; //Checking if the array nums has the number diff
                                            //if the number is present in the array add return its indice and the current indice
            }
            diffmap.insert({nums[i] , i}); //inserting nums[i] with its indice to a hashmap
        }
        return {};
    }
};
